# OpenAPI Documentation - JSON format (dot notation)
mimeType = application/json

post.description = Donne un sentiment ressortant d'un texte (positif, négatif ou neutre)
post.responses.default.description = Renvoie un Json composé d'`id`, `value` avec `value` le sentiment estimé
post.responses.default.content.application/json.schema.$ref =  #/components/schemas/JSONStream
post.summary = Analyse de sentimens
post.requestBody.required = true
post.requestBody.content.application/json.schema.$ref = #/components/schemas/JSONStream
post.parameters.0.in = query
post.parameters.0.name = indent
post.parameters.0.schema.type = boolean
post.parameters.0.description = Indent or not the JSON Result

# Examples

post.requestBody.content.application/json.example.0.id: 1
post.requestBody.content.application/json.example.0.value: I hate pizzas.
post.requestBody.content.application/json.example.1.id: 2
post.requestBody.content.application/json.example.1.value: This isn't bad !
post.requestBody.content.application/json.example.2.id: 3
post.requestBody.content.application/json.example.2.value: I have no idea for this last example (i expect neutral answer).
post.responses.default.content.application/json.example.0.id: 1
post.responses.default.content.application/json.example.0.value: neg
post.responses.default.content.application/json.example.1.id: 2
post.responses.default.content.application/json.example.1.value: pos
post.responses.default.content.application/json.example.2.id: 3
post.responses.default.content.application/json.example.2.value: neu

[use]
# exec
plugin = @ezs/spawn
# JSONParse
plugin = @ezs/basics
# ?
# plugin = @ezs/storage

[JSONParse]
separator = *

[expand]
path = value
size = 100

[expand/exec]
# command should be executable !
command = ./v1/sentiments/analysis.py

[dump]
indent = env('indent', false)
